<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <conv:InverseBoolConverter x:Key="InverseBoolConverter" />
    <conv:ObjectTypeToNameConverter x:Key="ObjectTypeToNameConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0" />
    </DataTemplate>

    <LinearGradientBrush x:Key="PopupDarkBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFA3AEB9" Offset="0" />
        <GradientStop Color="#FF8399A9" Offset="0.375" />
        <GradientStop Color="#FF718597" Offset="0.375" />
        <GradientStop Color="#FF617584" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFffffff" />
                <GradientStop Offset="1" Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <DataTemplate x:Key="IncreaseGlyphNormalKey">
        <Path 
            Width="9"
            Data="M0,5 L0,3 L4,-1 L8,3 L8,5 L4,1 z"
            Fill="White"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>
    <DataTemplate x:Key="DecreaseGlyphNormalKey">
        <Path
            Width="9"
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            Fill="White"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <Style x:Key="spinnerStyle" TargetType="RepeatButton">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid>
                        <chrome:ButtonChrome 
                            x:Name="Chrome"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="0,0,1,0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true" >
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected"/>
                                    <VisualState x:Name="Selected"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="FocusStates">
                                    <VisualState x:Name="Focused"/>
                                    <VisualState x:Name="Unfocused"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </chrome:ButtonChrome>
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="buttonSpinnerStyle" TargetType="{x:Type local:ButtonSpinner}">
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonSpinner}">
                    <Border
                        x:Name="Border"
                        SnapsToDevicePixels="True"
                        Background="{TemplateBinding Background}"
                        BorderBrush="#106EBE"
                        CornerRadius="2,0,0,2"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstContentColumn" Width="*" />
                                <ColumnDefinition x:Name="secondContentColumn" Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter 
                                x:Name="contentPresenter"
                                Focusable="False"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Grid 
                                x:Name="gridContent"
                                Grid.Column="1"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <RepeatButton 
                                    x:Name="PART_IncreaseButton"
                                    Background="#106EBE"
                                    Height="15"
                                    BorderBrush="White"
                                    Style="{StaticResource spinnerStyle}"
                                    IsTabStop="{TemplateBinding IsTabStop}"
                                    ContentTemplate="{StaticResource IncreaseGlyphNormalKey}">
                                </RepeatButton>
                                <Separator Background="White" Margin="0,14,0,0"/>
                                <RepeatButton 
                                    x:Name="PART_DecreaseButton"
                                    Grid.Row="1"
                                    Height="14"
                                    Background="#106EBE"
                                    BorderBrush="White"
                                    Style="{StaticResource spinnerStyle}"
                                    IsTabStop="{TemplateBinding IsTabStop}"
                                    ContentTemplate="{StaticResource DecreaseGlyphNormalKey}" >
                                </RepeatButton>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowButtonSpinner" Value="False">
                            <Setter Property="Visibility" Value="Hidden" TargetName="gridContent" />
                            <Setter Property="Width" Value="0" TargetName="gridContent" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlDisabledBackgroundKey}}" />
                        </Trigger>
                        <Trigger SourceName="PART_IncreaseButton" Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_IncreaseButton" Property="ContentTemplate" Value="{StaticResource IncreaseGlyphDisabledKey}" />
                        </Trigger>
                        <Trigger SourceName="PART_DecreaseButton" Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_DecreaseButton" Property="ContentTemplate" Value="{StaticResource DecreaseGlyphDisabledKey}" />
                        </Trigger>
                        <Trigger Property="ButtonSpinnerLocation" Value="Left">
                            <Setter TargetName="firstContentColumn" Property="Width" Value="Auto" />
                            <Setter TargetName="secondContentColumn" Property="Width" Value="*" />
                            <Setter TargetName="contentPresenter" Property="Grid.Column" Value="1" />
                            <Setter TargetName="gridContent" Property="Grid.Column" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TimePickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <chrome:ButtonChrome 
                            x:Name="ToggleButtonChrome"
                            CornerRadius="0,2,2,0"
                            Background="#106EBE"
                            BorderThickness="0"
                            RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:TimePicker}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter 
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Grid 
                                    x:Name="arrowGlyph"
                                    IsHitTestVisible="False"
                                    Grid.Column="1"
                                    Margin="5">
                                    <Path
                                        x:Name="Arrow"
                                        Width="9"
                                        Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" 
                                        Fill="White"
                                        VerticalAlignment="Center" />
                                </Grid>
                            </Grid>
                        </chrome:ButtonChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ListItemHover" Color="#003366" />

    <Style x:Key="TimeItemStyle" TargetType="ListBoxItem">
        <Style.Setters>
            <Setter Property="Padding" Value="4" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border 
                            CornerRadius="2"
                            Background="{TemplateBinding Background}">
                            <ContentPresenter
                                x:Name="contentPresenter" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#003366"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="#003366"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =============================================================================== -->
    <!-- TimePicker                                                                      -->
    <!-- =============================================================================== -->

    <Style x:Key="TimePickerStyle" TargetType="{x:Type local:TimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TimePicker}">
                    <Grid x:Name="root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <local:ButtonSpinner 
                            x:Name="PART_Spinner"
                            IsTabStop="False"
                            Style="{StaticResource buttonSpinnerStyle}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                            AllowSpin="{TemplateBinding AllowSpin}"
                            ShowButtonSpinner="True">
                            <local:WatermarkTextBox 
                                x:Name="PART_TextBox"
                                BorderThickness="0"
                                Background="Transparent"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontSize="{TemplateBinding FontSize}"
                                FontStretch="{TemplateBinding FontStretch}"
                                FontStyle="{TemplateBinding FontStyle}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                IsTabStop="True"
                                MinWidth="20"
                                AcceptsReturn="False"
                                Padding="{TemplateBinding Padding}"
                                TextAlignment="{TemplateBinding TextAlignment}"
                                TextWrapping="NoWrap"
                                Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                TabIndex="{TemplateBinding TabIndex}"
                                Watermark="{TemplateBinding Watermark}"
                                WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                        </local:ButtonSpinner>
                        <ToggleButton 
                            x:Name="_timePickerToggleButton"
                            Grid.Column="1"
                            Focusable="False"
                            IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource TimePickerToggleButtonStyle}"
                            IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                            IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                            Visibility="{TemplateBinding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}}" >
                        </ToggleButton>
                        <Popup 
                            x:Name="PART_Popup"
                            IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
                            AllowsTransparency="True"
                            StaysOpen="False"
                            PopupAnimation="Fade"
                            Margin="0,10,0,0"
                            ToolTip="{x:Static sys:String.Empty}">
                            <Popup.Resources>
                                <Style TargetType="ToolTip">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Grid 
                                x:Name="DropDown"
                                Margin="0,10,0,0"
                                SnapsToDevicePixels="True"                
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    BorderThickness="1"
                                    BorderBrush="#106EBE"
                                    CornerRadius="2"
                                    Margin="0,2,0,0"
                                    MinWidth="{Binding ActualWidth, ElementName=root}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ListBox 
                                    x:Name="PART_TimeListItems"
                                    BorderThickness="0"
                                    Padding="4,4,5,0"
                                    DisplayMemberPath="Display"
                                    Background="#106EBE"
                                    Foreground="White"
                                    ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                    ItemContainerStyle="{StaticResource TimeItemStyle}"/>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TemplatedParent, RelativeSource={RelativeSource Self}, Converter={StaticResource ObjectTypeToNameConverter}}" Value="DateTimePicker" />
                                <Condition Binding="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsHitTestVisible" Value="True" TargetName="_timePickerToggleButton" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>